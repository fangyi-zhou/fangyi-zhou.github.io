<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Publications on Fangyi Zhou</title><link>https://fangyi.io/publication/</link><description>Recent content in Publications on Fangyi Zhou</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Thu, 09 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://fangyi.io/publication/index.xml" rel="self" type="application/rss+xml"/><item><title>Communicating Finite State Machines and an Extensible Toolchain for Multiparty Session Types</title><link>https://fangyi.io/publication/2021/communicating-finite-state-machines-and-an-extensible-toolchain-for-multiparty-session-types/</link><pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate><guid>https://fangyi.io/publication/2021/communicating-finite-state-machines-and-an-extensible-toolchain-for-multiparty-session-types/</guid><description>Multiparty session types (MPST) provide a typing discipline for message passing concurrency, ensuring deadlock freedom for distributed processes. This paper first summarises the relationship between MPST and communicating finite state machines (CFSMs), which offers not only theoretical justifications of MPST but also a guidance to implement MPST in practice. As one of the applications, we present ùúàSCR (NuScr), an extensible toolchain for MPST-based multiparty protocols. The toolchain can convert multiparty protocols in the Scribble protocol description language into global types in the MPST theory; global types are projected into local types, and local types are converted to their corresponding CFSMs.</description></item><item><title>Communication-Safe Web Programming in TypeScript with Routed Multiparty Session Types</title><link>https://fangyi.io/publication/2021/communication-safe-web-programming-in-typescript-with-routed-multiparty-session-types/</link><pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate><guid>https://fangyi.io/publication/2021/communication-safe-web-programming-in-typescript-with-routed-multiparty-session-types/</guid><description>Modern web programming involves coordinating interactions between browser clients and a server. Typically, the interactions in web-based distributed systems are informally described, making it hard to ensure correctness, especially communication safety, i.e. all endpoints progress without type errors or deadlocks, conforming to a specified protocol.
We present STScript, a toolchain that generates TypeScript APIs for communication-safe web development over WebSockets, and RouST, a new session type theory that supports multiparty communications with routing mechanisms.</description></item><item><title>Statically Verified Refinements for Multiparty Protocols</title><link>https://fangyi.io/publication/2020/statically-verified-refinements-for-multiparty-protocols/</link><pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate><guid>https://fangyi.io/publication/2020/statically-verified-refinements-for-multiparty-protocols/</guid><description>With distributed computing becoming ubiquitous in the modern era, safe distributed programming is an open challenge. To address this, multiparty session types (MPST) provide a typing discipline for message-passing concurrency, guaranteeing communication safety properties such as deadlock freedom.
While originally MPST focus on the communication aspects, and employ a simple typing system for communication payloads, communication protocols in the real world usually contain constraints on the payload. We introduce refined multiparty session types (RMPST), an extension of MPST, that express data dependent protocols via refinement types on the data types.</description></item><item><title>Generating Interactive WebSocket Applications in TypeScript</title><link>https://fangyi.io/publication/2020/generating-interactive-websocket-applications-in-typescript/</link><pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate><guid>https://fangyi.io/publication/2020/generating-interactive-websocket-applications-in-typescript/</guid><description>Advancements in mobile device computing power have made interactive web applications possible, allowing the web browser to render contents dynamically and support low-latency communication with the server. This comes at a cost to the developer, who now needs to reason more about correctness of communication patterns in their application as web applications support more complex communication patterns.
Multiparty session types (MPST) provide a framework for verifying conformance of implementations to their prescribed communication protocol.</description></item></channel></rss>