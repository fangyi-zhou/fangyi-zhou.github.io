<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fangyi Zhou</title><link>https://fangyi.io/</link><description>Recent content on Fangyi Zhou</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Mon, 12 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://fangyi.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Generalised Multiparty Session Types with Crash-Stop Failures</title><link>https://fangyi.io/publication/2022/generalised-multiparty-session-types-with-crash-stop-failures/</link><pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate><guid>https://fangyi.io/publication/2022/generalised-multiparty-session-types-with-crash-stop-failures/</guid><description>Session types enable the specification and verification of communicating systems. However, their theory often assumes that processes never fail. To address this limitation, we present a generalised multiparty session type (MPST) theory with crash-stop failures, where processes can crash arbitrarily.
Our new theory validates more protocols and processes w.r.t. previous work. We apply minimal syntactic changes to standard session $\pi$-calculus and types: we model crashes and their handling semantically, with a generalised MPST typing system parametric on a behavioural safety property.</description></item><item><title>Neo-Classical Logic (SIGBOVIK 2022)</title><link>https://fangyi.io/2022/04/neo-classical-logic-sigbovik-2022/</link><pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate><guid>https://fangyi.io/2022/04/neo-classical-logic-sigbovik-2022/</guid><description>My colleague Martin Vassor and I worked on a paper with title Neo-Classical Logic for SIGBOVIK 20221.
You can read the paper here (with reviews).
In this April Fool&amp;rsquo;s paper, we explore a possible logic that encapsulates seemingly contradictory observations in the real work. We investigate how such contradictions can be represented in a logic, and show its decidability. Moreover, we prove standard theorems such as &amp;ldquo;Law of Excluded Middle&amp;rdquo;, but also novel theorems such as &amp;ldquo;Law of Contradiction&amp;rdquo;.</description></item><item><title>Meta-Programming in LaTeX</title><link>https://fangyi.io/2022/03/meta-programming-in-latex/</link><pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate><guid>https://fangyi.io/2022/03/meta-programming-in-latex/</guid><description>Many researchers write paper in $\LaTeX$ because it provides a convenient macro system that makes typesetting maths equations easy (or difficult, when it doesn&amp;rsquo;t work).
One way to write papers in $\LaTeX$ is to use as few &amp;ldquo;advanced features&amp;rdquo; as possible, for a vanilla experience: no fancy packages, just use the minimal setup. Gradually, as the paper starts to grow long, you begin to think of adding some macros for things that are too long to type, for example:</description></item><item><title>Communicating Finite State Machines and an Extensible Toolchain for Multiparty Session Types</title><link>https://fangyi.io/publication/2021/communicating-finite-state-machines-and-an-extensible-toolchain-for-multiparty-session-types/</link><pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate><guid>https://fangyi.io/publication/2021/communicating-finite-state-machines-and-an-extensible-toolchain-for-multiparty-session-types/</guid><description>Multiparty session types (MPST) provide a typing discipline for message passing concurrency, ensuring deadlock freedom for distributed processes. This paper first summarises the relationship between MPST and communicating finite state machines (CFSMs), which offers not only theoretical justifications of MPST but also a guidance to implement MPST in practice. As one of the applications, we present ùúàSCR (NuScr), an extensible toolchain for MPST-based multiparty protocols. The toolchain can convert multiparty protocols in the Scribble protocol description language into global types in the MPST theory; global types are projected into local types, and local types are converted to their corresponding CFSMs.</description></item><item><title>Communication-Safe Web Programming in TypeScript with Routed Multiparty Session Types</title><link>https://fangyi.io/publication/2021/communication-safe-web-programming-in-typescript-with-routed-multiparty-session-types/</link><pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate><guid>https://fangyi.io/publication/2021/communication-safe-web-programming-in-typescript-with-routed-multiparty-session-types/</guid><description>Modern web programming involves coordinating interactions between browser clients and a server. Typically, the interactions in web-based distributed systems are informally described, making it hard to ensure correctness, especially communication safety, i.e. all endpoints progress without type errors or deadlocks, conforming to a specified protocol.
We present STScript, a toolchain that generates TypeScript APIs for communication-safe web development over WebSockets, and RouST, a new session type theory that supports multiparty communications with routing mechanisms.</description></item><item><title>Statically Verified Refinements for Multiparty Protocols</title><link>https://fangyi.io/publication/2020/statically-verified-refinements-for-multiparty-protocols/</link><pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate><guid>https://fangyi.io/publication/2020/statically-verified-refinements-for-multiparty-protocols/</guid><description>With distributed computing becoming ubiquitous in the modern era, safe distributed programming is an open challenge. To address this, multiparty session types (MPST) provide a typing discipline for message-passing concurrency, guaranteeing communication safety properties such as deadlock freedom.
While originally MPST focus on the communication aspects, and employ a simple typing system for communication payloads, communication protocols in the real world usually contain constraints on the payload. We introduce refined multiparty session types (RMPST), an extension of MPST, that express data dependent protocols via refinement types on the data types.</description></item><item><title>Generating Interactive WebSocket Applications in TypeScript</title><link>https://fangyi.io/publication/2020/generating-interactive-websocket-applications-in-typescript/</link><pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate><guid>https://fangyi.io/publication/2020/generating-interactive-websocket-applications-in-typescript/</guid><description>Advancements in mobile device computing power have made interactive web applications possible, allowing the web browser to render contents dynamically and support low-latency communication with the server. This comes at a cost to the developer, who now needs to reason more about correctness of communication patterns in their application as web applications support more complex communication patterns.
Multiparty session types (MPST) provide a framework for verifying conformance of implementations to their prescribed communication protocol.</description></item><item><title>Statically Verified Refinements for Multiparty Protocols @ OOPSLA '20</title><link>https://fangyi.io/2020/03/statically-verified-refinements-for-multiparty-protocols-oopsla-20/</link><pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate><guid>https://fangyi.io/2020/03/statically-verified-refinements-for-multiparty-protocols-oopsla-20/</guid><description>I presented my paper Statically Verified Refinements for Multiparty Protocols at OOPSLA 2020 this year, held virtually. This paper is co-authored by Francisco Ferreira, Raymond Hu, Rumyana Neykova, and Nobuko Yoshida.
You can find the paper here from the publisher (Open Access). The full version of the paper is available on arXiv at 2009.06541.
The video of the talk is available on YouTube (full version, 15 min), and a short version (5 min) is also available.</description></item><item><title>About</title><link>https://fangyi.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fangyi.io/about/</guid><description>I am a PhD student at Imperial College London, advised by Prof. Nobuko Yoshida.
I use they/them pronouns.
Some links:
Google Scholar
DBLP
ORCID: 0000-0002-8973-0821
GPG Public Key</description></item><item><title>Talks</title><link>https://fangyi.io/talks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fangyi.io/talks/</guid><description>Here are an (incomplete) list of my talks and their slides:
Generalised Multiparty Session Types with Crash-Stop Failures Aug 2022 &amp;mdash; INI Concurrency Meeting &amp;mdash; Cambridge, UK (slides) Monitoring Protocol Conformance with Multiparty Session Types and OpenTelemetry Sep 2021 &amp;mdash; Dagstuhl Seminar: Behavioural Types: Bridging Theory and Practice &amp;mdash; Virtual (slides) Mar 2021 &amp;mdash; Mass Open Cloud Telemetry Working Group &amp;mdash; Virtual (slides) Statically Verified Refinements for Multiparty Protocols Mar 2021 &amp;mdash; PLUG (Programming Language Research in Glasgow) &amp;mdash; Virtual Nov 2020 &amp;mdash; SPLASH 2020 - OOPSLA &amp;mdash; Virtual (slides)</description></item></channel></rss>